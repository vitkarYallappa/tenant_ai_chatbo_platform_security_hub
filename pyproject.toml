[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "security-hub"
description = "Comprehensive security and authentication service for enterprise applications"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Security Hub Team", email = "security@company.com"}
]
maintainers = [
    {name = "Security Hub Team", email = "security@company.com"}
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Framework :: FastAPI",
    "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
    "Topic :: Security",
    "Topic :: System :: Systems Administration :: Authentication/Directory",
]
keywords = ["security", "authentication", "authorization", "fastapi", "api", "rbac", "mfa"]
requires-python = ">=3.11"
dependencies = [
    "fastapi>=0.104.0,<0.105.0",
    "uvicorn[standard]>=0.24.0,<0.25.0",
    "pydantic>=2.4.0,<3.0.0",
    "pydantic-settings>=2.0.0,<3.0.0",

    # Database drivers
    "redis>=5.0.0,<6.0.0",
    "asyncpg>=0.28.0,<0.29.0",  # PostgreSQL async driver
    "SQLAlchemy==2.0.16",
    "sqlalchemy-utils==0.41.1",

    "bcrypt>=4.1.2",
    "python-jose[cryptography]>=3.3.0",
    "passlib[bcrypt]>=1.7.4",
    "python-multipart>=0.0.6",
    "email-validator>=2.1.0",
    "bleach>=6.1.0",
    "phonenumbers>=8.13.26",
    "httpx>=0.25.2",
    "python-dotenv>=1.0.0",
    "psutil>=5.9.6",
    "structlog>=23.2.0",
    "rich>=13.7.0",
    "python-dateutil>=2.8.2",
    "orjson>=3.9.10",
    "python-decouple>=3.8",
    "click>=8.1.7",
    "typer>=0.9.0",
]
dynamic = ["version"]

[project.optional-dependencies]
dev = [
    "black>=23.11.0",
    "isort>=5.12.0",
    "flake8>=6.1.0",
    "mypy>=1.7.1",
    "pre-commit>=3.6.0",
    "mkdocs>=1.5.3",
    "mkdocs-material>=9.4.8",
    "ipdb>=0.13.13",
    "rich>=13.7.0",
]
test = [
    "pytest>=7.4.3",
    "pytest-asyncio>=0.21.1",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "factory-boy>=3.3.0",
    "faker>=20.1.0",
    "httpx>=0.25.2",
    "respx>=0.20.2",
    "freezegun>=1.2.2",
]
security = [
    "bandit>=1.7.5",
    "safety>=2.3.5",
    "semgrep>=1.45.0",
]
monitoring = [
    "prometheus-client>=0.19.0",
    "opentelemetry-api>=1.21.0",
    "opentelemetry-sdk>=1.21.0",
]

[project.urls]
Homepage = "https://github.com/company/security-hub"
Documentation = "https://security-hub.docs.company.com"
Repository = "https://github.com/company/security-hub"
"Bug Tracker" = "https://github.com/company/security-hub/issues"
Changelog = "https://github.com/company/security-hub/blob/main/CHANGELOG.md"

[project.scripts]
security-hub = "src.main:main"
security-hub-cli = "src.cli.main:app"

[tool.setuptools]
package-dir = {"" = "."}
packages = ["src"]

[tool.setuptools.dynamic]
version = {attr = "src.__version__"}

[tool.setuptools_scm]
write_to = "src/_version.py"

# Black code formatting
[tool.black]
line-length = 100
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# isort import sorting
[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
src_paths = ["src", "tests"]

# MyPy type checking
[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "uvicorn.*",
    "redis.*",
    "passlib.*",
    "bleach.*",
    "phonenumbers.*",
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=80",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "security: marks tests as security tests",
    "performance: marks tests as performance tests",
    "smoke: marks tests as smoke tests",
]
asyncio_mode = "auto"
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]

# Coverage configuration
[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__init__.py",
    "*/migrations/*",
    "*/venv/*",
    "*/.venv/*",
]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\bProtocol\):",
    "@(abc\.)?abstractmethod",
]
show_missing = true
precision = 2

[tool.coverage.html]
directory = "htmlcov"

# Bandit security linting
[tool.bandit]
exclude_dirs = ["tests", "venv", ".venv"]
tests = ["B201", "B301", "B302", "B303", "B304", "B305", "B306", "B307", "B308", "B309", "B310", "B311", "B312", "B313", "B314", "B315", "B316", "B317", "B318", "B319", "B320", "B321", "B322", "B323", "B324", "B325", "B401", "B402", "B403", "B404", "B405", "B406", "B407", "B408", "B409", "B410", "B411", "B412", "B413", "B501", "B502", "B503", "B504", "B505", "B506", "B507", "B601", "B602", "B603", "B604", "B605", "B606", "B607", "B608", "B609", "B610", "B611", "B701", "B702", "B703"]
skips = ["B101", "B601"]

# Ruff linting (alternative to flake8)
[tool.ruff]
target-version = "py311"
line-length = 100
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "C",  # flake8-comprehensions
    "B",  # flake8-bugbear
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/*" = ["F401", "F811"]

# Commitizen configuration
[tool.commitizen]
name = "cz_conventional_commits"
version = "1.0.0"
version_files = [
    "src/__init__.py",
    "pyproject.toml:version"
]
style = [
    ["qmark", "fg:#ff9d00 bold"],
    ["question", "bold"],
    ["answer", "fg:#ff9d00 bold"],
    ["pointer", "fg:#ff9d00 bold"],
    ["highlighted", "fg:#ff9d00 bold"],
    ["selected", "fg:#cc5454"],
    ["separator", "fg:#cc5454"],
    ["instruction", ""],
    ["text", ""],
    ["disabled", "fg:#858585 italic"]
]

# Semantic release configuration
[tool.semantic_release]
version_variable = "src/__init__.py:__version__"
version_pattern = "pyproject.toml:version = \"{version}\""
version_toml = "pyproject.toml:tool.commitizen.version"
major_on_zero = false
upload_to_pypi = false
upload_to_release = true
build_command = "pip install -e . && python -m build"